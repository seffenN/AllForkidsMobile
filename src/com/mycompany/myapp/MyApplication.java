package com.mycompany.myapp;

import com.codename1.components.ImageViewer;
import com.codename1.db.Database;

import static com.codename1.ui.CN.*;

import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;

import com.codename1.ui.Toolbar;

import com.codename1.ui.layouts.BoxLayout;

import com.codename1.ui.Button;
import static com.codename1.ui.Component.CENTER;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import static com.codename1.ui.TextArea.PASSWORD;
import com.codename1.ui.TextField;
import com.codename1.ui.URLImage;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;

import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.plaf.Style;
import edu.allforkids.entities.Produits;
import edu.allforkids.entities.User;
import edu.allforkids.gui.AffichageProduits;
import edu.allforkids.gui.AfficherProduits2;
import edu.allforkids.gui.AjoutProduit;
import edu.allforkids.gui.HomeForm;
import edu.allforkids.gui.Login;
import edu.allforkids.gui.Register;

import edu.allforkids.services.CrudStore;
import edu.allforkids.services.CrudUser;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import java.util.List;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }
    private EncodedImage ei;
    private Label l;
    Database db;
    boolean created = false;
    public float prix = 0;
    public int idProduit;
    public String imageProd;
    public int quantite;
    Toolbar toolbar;
    Form f1;
 Form hi;
    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        try {
            HomeForm home = new HomeForm();

           
             hi = new Form();
            Image logo=Image.createImage("/logo.png");
             ImageViewer im=new ImageViewer();
            
           
            Image ballon=Image.createImage("/balloons.png");
             im.setImage(ballon);
            Container cn = BorderLayout.west(new Label(ballon));
            hi.add(cn);
            hi.add(logo);
            Button connexion = new Button("Se Connecter");
            Button inscire = new Button("s inscire");
           
            hi.addAll(connexion, inscire);
            
            
            connexion.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                 
                    Login l = new Login(theme);
           

                }
            });
            inscire.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    Register r = new Register();
                }
            });
            
            
        
            
            

            hi.show();
        } catch (IOException ex) {
        }
    }

    public Form getHi() {
        return hi;
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
